# Metridoc Development Guide

## Existing Resources
* [Metridoc (live application in production)](metridoc.library.upenn.edu/metridoc-reports)
* [Metridoc on GitHub](https://github.com/metridoc)
* [Metridoc Servers Documentation (Confluence)](https://project.library.upenn.edu/confluence/display/progwiki/Metridoc+Servers+Documentation)
* [Metridoc Additional Info (Confluence)](https://project.library.upenn.edu/confluence/display/progwiki/Metridoc+Additional+Info)


## Requirements / Getting started
* Metridoc requires Java 7.  Install the final release of Java 7 on your development machine and be ready update references in `$JAVA_HOME` to Java 7 when working with Metridoc code.
* Clone the [metridoc-grails](https://gitlab.library.upenn.edu/metridoc/metridoc-grails) repo onto your local development machine.
* From within the metridoc-grails repo, run the `buildAll.sh` shell script to run tests and compile a build.

## Local development
### Working with plugins in development

* To reference plugins in development within a metridoc application, clone the [metridoc-app](https://gitlab.library.upenn.edu/metridoc/metridoc-app) repo outside of the metridoc-grails directory.
* From within the metridoc-app repo, open up `grails-app/conf/BuildConfig.groovy` and add the following block just below the `grails.project.war.file = "target/${appName}.war"` line:
```bash
grails.plugin.location."metridoc-core" = "***RELATIVE/OR/ABSOLUTE/PATH/TO***/metridoc-grails/metridoc-grails-core"
grails.plugin.location."metridoc-illiad" = "***RELATIVE/OR/ABSOLUTE/PATH/TO***/metridoc-grails/metridoc-grails-illiad"
grails.plugin.location."metridoc-funds" = "***RELATIVE/OR/ABSOLUTE/PATH/TO***/metridoc-grails/metridoc-grails-funds"
grails.plugin.location."metridoc-bd" = "***RELATIVE/OR/ABSOLUTE/PATH/TO***/metridoc-grails/metridoc-grails-bd"
grails.plugin.location."metridoc-rid" = "***RELATIVE/OR/ABSOLUTE/PATH/TO***/metridoc-grails/metridoc-grails-rid"
```
Replace `***RELATIVE/OR/ABSOLUTE/PATH/TO***` with the relative or absolute path to your local clone of metridoc-grails.

### Building metridoc-app
To run the tests and then build metridoc-app with local plugins, run the following two commands from within the `metridoc-app` directory:
```bash
./grailsw --refresh-dependencies --non-interactive tA :unit --stacktrace
./grailsw --refresh-dependencies --non-interactive maven-install --stacktrace
```

Finally to run the application locally, run the following command from within the metridoc-app directory:
```bash
./grailsw --refresh-dependencies run-app
```

If using the stock configuration for deployment, your local deployment should be accessible in the browser at `http://localhost:8080/metridoc-reports`.

## Deployment
### For Interns

* From the root of your `metridoc-grails` repo, run the `buildAll.sh` shell script.  This runs the test suite and then, if there are no failures, additionally runs the maven-install command, first for `metridoc-grails-core`, then for each of the additional plugins within `metridoc-grails`.

* Once all of the tests are passing in `metridoc-grails`, the last step is the update the `VERSION` file in the root of the `metridoc-grails` directory with the new version number.  Generally speaking, for minor changes, this will be a minor version release, ie `0.8.4` to `0.8.5`.  Consult with a technical point of contact in LTS for version numbering.
* Commit the `VERSION` file update locally.
* Resolve any conflicts that your branch has with the most up-to-date version of the remote master branch.
* Push your feature branch to the metridoc-grails repository on the [metridoc-grails GitLab repo](https://gitlab.library.upenn.edu/metridoc/metridoc-grails).

* Submit a pull request for your feature branch to be reviewed by an LTS developer for inclusion in the project on GitLab.

### For LTS administrators

* Consult the [Administrators Deployment Guide]().